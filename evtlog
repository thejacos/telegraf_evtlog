// Code generated by protoc-gen-go. DO NOT EDIT.
// source: evtlog.proto

package evtlog

import (
fmt "fmt"
proto "github.com/golang/protobuf/proto"
math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Evtlog struct {
Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
FileType string `protobuf:"bytes,2,opt,name=file_type,json=fileType,proto3" json:"file_type,omitempty"`
Compressed bool `protobuf:"varint,3,opt,name=compressed,proto3" json:"compressed,omitempty"`
SeqNo uint64 `protobuf:"varint,4,opt,name=seq_no,json=seqNo,proto3" json:"seq_no,omitempty"`
FileName string `protobuf:"bytes,5,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
Size uint64 `protobuf:"varint,6,opt,name=size,proto3" json:"size,omitempty"`
File []byte `protobuf:"bytes,7,opt,name=file,proto3" json:"file,omitempty"`
ChunckTotal uint32 `protobuf:"varint,8,opt,name=chunck_total,json=chunckTotal,proto3" json:"chunck_total,omitempty"`
ChunckNo uint32 `protobuf:"varint,9,opt,name=chunck_no,json=chunckNo,proto3" json:"chunck_no,omitempty"`
XXX_NoUnkeyedLiteral struct{} `json:"-"`
XXX_unrecognized []byte `json:"-"`
XXX_sizecache int32 `json:"-"`
}

func (m *Evtlog) Reset() { *m = Evtlog{} }
func (m *Evtlog) String() string { return proto.CompactTextString(m) }
func (*Evtlog) ProtoMessage() {}
func (*Evtlog) Descriptor() ([]byte, []int) {
return fileDescriptor_9df2bbecfa77b681, []int{0}
}

func (m *Evtlog) XXX_Unmarshal(b []byte) error {
return xxx_messageInfo_Evtlog.Unmarshal(m, b)
}
func (m *Evtlog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
return xxx_messageInfo_Evtlog.Marshal(b, m, deterministic)
}
func (m *Evtlog) XXX_Merge(src proto.Message) {
xxx_messageInfo_Evtlog.Merge(m, src)
}
func (m *Evtlog) XXX_Size() int {
return xxx_messageInfo_Evtlog.Size(m)
}
func (m *Evtlog) XXX_DiscardUnknown() {
xxx_messageInfo_Evtlog.DiscardUnknown(m)
}

var xxx_messageInfo_Evtlog proto.InternalMessageInfo

func (m *Evtlog) GetVersion() string {
if m != nil {
return m.Version
}
return ""
}

func (m *Evtlog) GetFileType() string {
if m != nil {
return m.FileType
}
return ""
}

func (m *Evtlog) GetCompressed() bool {
if m != nil {
return m.Compressed
}
return false
}

func (m *Evtlog) GetSeqNo() uint64 {
if m != nil {
return m.SeqNo
}
return 0
}

func (m *Evtlog) GetFileName() string {
if m != nil {
return m.FileName
}
return ""
}

func (m *Evtlog) GetSize() uint64 {
if m != nil {
return m.Size
}
return 0
}

func (m *Evtlog) GetFile() []byte {
if m != nil {
return m.File
}
return nil
}

func (m *Evtlog) GetChunckTotal() uint32 {
if m != nil {
return m.ChunckTotal
}
return 0
}

func (m *Evtlog) GetChunckNo() uint32 {
if m != nil {
return m.ChunckNo
}
return 0
}

func init() {
proto.RegisterType((*Evtlog)(nil), "evtlog")
}

func init() { proto.RegisterFile("evtlog.proto", fileDescriptor_9df2bbecfa77b681) }

var fileDescriptor_9df2bbecfa77b681 = []byte{
// 225 bytes of a gzipped FileDescriptorProto
0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0xc1, 0x4a, 0xc4, 0x40,
0x0c, 0x86, 0x89, 0x76, 0xbb, 0x6d, 0xb6, 0x5e, 0x06, 0x84, 0x80, 0x20, 0xa3, 0xa7, 0x39, 0x79,
0xf1, 0x0d, 0x7c, 0x80, 0x1e, 0x86, 0x3d, 0x79, 0x29, 0xb5, 0x46, 0x2d, 0xb6, 0x93, 0x6e, 0x67,
0x5c, 0x58, 0x9f, 0x5c, 0xf0, 0x22, 0x33, 0x5d, 0x75, 0x6f, 0x7f, 0xbe, 0x3f, 0xf9, 0x43, 0x82,
0x15, 0xef, 0xc3, 0x20, 0xaf, 0x77, 0xd3, 0x2c, 0x41, 0x6e, 0xbf, 0x01, 0xf3, 0x05, 0x28, 0xc2,
0xf5, 0x9e, 0x67, 0xdf, 0x8b, 0x23, 0xd0, 0x60, 0x4a, 0xfb, 0x5b, 0xaa, 0x2b, 0x2c, 0x5f, 0xfa,
0x81, 0x9b, 0x70, 0x98, 0x98, 0xce, 0x92, 0x57, 0x44, 0xb0, 0x3d, 0x4c, 0xac, 0xae, 0x11, 0x3b,
0x19, 0xa7, 0x99, 0xbd, 0xe7, 0x67, 0x3a, 0xd7, 0x60, 0x0a, 0x7b, 0x42, 0xd4, 0x25, 0xe6, 0x9e,
0x77, 0x8d, 0x13, 0xca, 0x34, 0x98, 0xcc, 0xae, 0x3c, 0xef, 0x6a, 0xf9, 0xcb, 0x74, 0xed, 0xc8,
0xb4, 0xfa, 0xcf, 0xac, 0xdb, 0x91, 0x95, 0xc2, 0xcc, 0xf7, 0x9f, 0x4c, 0x79, 0x9a, 0x48, 0x3a,
0xb2, 0xe8, 0xd3, 0x5a, 0x83, 0xa9, 0x6c, 0xd2, 0xea, 0x06, 0xab, 0xee, 0xed, 0xc3, 0x75, 0xef,
0x4d, 0x90, 0xd0, 0x0e, 0x54, 0x68, 0x30, 0x17, 0x76, 0xb3, 0xb0, 0x6d, 0x44, 0x71, 0xcf, 0xb1,
0xc5, 0x09, 0x95, 0xc9, 0x2f, 0x16, 0x50, 0xcb, 0xc3, 0xe6, 0xf1, 0x78, 0xfc, 0x17, 0xc0, 0x53,
0x9e, 0x3e, 0x72, 0xff, 0x13, 0x00, 0x00, 0xff, 0xff, 0xd2, 0xa5, 0x88, 0x2e, 0x21, 0x01, 0x00,
0x00,
}
